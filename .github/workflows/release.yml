name: Release Maven Projects
on: 
  push:
    tags:
      - v*

jobs:
  test:
    name: Test Maven Project
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Cache Maven archetype
      id: cache-maven
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-jdk-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Setup JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: test project 
      run: mvn -DMAIL_HOST=${{MAIL_HOST}} -DMAIL_PORT=${{MAIL_PORT}} -DMAIL_USERNAME=${{MAIL_USERNAME}} -DMAIL_PASSWORD=${{MAIL_PASSWORD}} -DMAIL_PTL=${{MAIL_PTL}} -DMAIL_PTL_EBLE=${{MAIL_PTL_EBLE}} -DMAIL_CNT_TMOUT=${{MAIL_CNT_TMOUT}} clean verify

  test-integration:
    name: Test integration Project
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Cache Maven archetype
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Setup JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Maven Package
      run: mvn -B -DskipTests -DMAIL_HOST=${{MAIL_HOST}} -DMAIL_PORT=${{MAIL_PORT}} -DMAIL_USERNAME=${{MAIL_USERNAME}} -DMAIL_PASSWORD=${{MAIL_PASSWORD}} -DMAIL_PTL=${{MAIL_PTL}} -DMAIL_PTL_EBLE=${{MAIL_PTL_EBLE}} -DMAIL_CNT_TMOUT=${{MAIL_CNT_TMOUT}} clean package
    - name: Maven Verify
      run: mvn -B -Pintegration-test -DMAIL_HOST=${{MAIL_HOST}} -DMAIL_PORT=${{MAIL_PORT}} -DMAIL_USERNAME=${{MAIL_USERNAME}} -DMAIL_PASSWORD=${{MAIL_PASSWORD}} -DMAIL_PTL=${{MAIL_PTL}} -DMAIL_PTL_EBLE=${{MAIL_PTL_EBLE}} -DMAIL_CNT_TMOUT=${{MAIL_CNT_TMOUT}} clean verify

  build:
    name: Build Maven Project
    runs-on: ubuntu-latest
    needs: [test, test-integration]   
    steps:
    - uses: actions/checkout@master
    - name: Cache Maven archetype
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Setup JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Build & Test project 
      run: mvn -f pom.xml -DMAIL_HOST=${{MAIL_HOST}} -DMAIL_PORT=${{MAIL_PORT}} -DMAIL_USERNAME=${{MAIL_USERNAME}} -DMAIL_PASSWORD=${{MAIL_PASSWORD}} -DMAIL_PTL=${{MAIL_PTL}} -DMAIL_PTL_EBLE=${{MAIL_PTL_EBLE}} -DMAIL_CNT_TMOUT=${{MAIL_CNT_TMOUT}} clean install
    - name: Upload Maven build artifact
      uses: actions/upload-artifact@v1
      with:
        name: artifact
        path: target/music-all-back.jar

  hadolint:
   name: Test Dockerfile
   runs-on: ubuntu-latest
   steps:
   - name: Checkout Source
     uses: actions/checkout@master
   - name: Install Docker
     run: curl -sSL https://get.docker.com/ | sh
   - name: Run hadolint
     run: docker run --rm -i hadolint/hadolint < Dockerfile 

  publish:
    name: Publish - GitHub Packages
    runs-on: ubuntu-latest
    needs: [build, hadolint]
    steps:
    - uses: actions/checkout@master
    - name: Install Docker
      run: curl -sSL https://get.docker.com/ | sh
    - name: Login to Github Registry
      run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
    - name: Get the version
      id: vars
      run: | 
        echo ::set-output name=tag::$(echo ${GITHUB_REF:10})
        echo ${GITHUB_REF}
    - name: Build the tagged image
      run: docker build . --file Dockerfile --target=build -t docker.pkg.github.com/${{ github.repository }}/music-all-back:${{steps.vars.outputs.tag}}
    - name: Build the latest image
      run: docker build . --file Dockerfile --target=build -t docker.pkg.github.com/${{ github.repository }}/music-all-back:latest
    - name: Publish artifact to Github Registry
      run: |
        BUILD_ID=docker.pkg.github.com/${{ github.repository }}/music-all-back
        docker push $BUILD_ID:${{steps.vars.outputs.tag}}
        docker push $BUILD_ID:latest
